[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
source = 1

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 499, 297 )
expression = "st_out = (floor(st_in*dv)+0.5)/dv;"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 1, 1, 1 ) ]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "DownScale"

[resource]
code = "shader_type canvas_item;
uniform float DownScale;



void vertex() {
// Output:0

}

void fragment() {
// Input:7
	vec3 n_out7p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorOp:8
	vec3 n_in8p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out8p0 = n_in8p0 / n_out7p0;

// ScalarUniform:9
	float n_out9p0 = DownScale;

// VectorOp:10
	vec3 n_out10p0 = n_out8p0 / vec3(n_out9p0);

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// Expression:6
	vec3 n_out6p0;
	n_out6p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out6p0 = (floor(n_out3p0*n_out10p0)+0.5)/n_out10p0;
	}

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out6p0.xy, 0.0);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 262, 50.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 960, 140 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 20, 360 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 780, 120 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 260, 120 )
nodes/fragment/6/size = Vector2( 499, 297 )
nodes/fragment/6/input_ports = "0,1,dv;1,1,st_in;"
nodes/fragment/6/output_ports = "0,1,st_out;"
nodes/fragment/6/expression = "st_out = (floor(st_in*dv)+0.5)/dv;"
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -400, 180 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -120, 120 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -140, 260 )
nodes/fragment/10/node = SubResource( 10 )
nodes/fragment/10/position = Vector2( 80, 120 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 8, 0, 10, 0, 9, 0, 10, 1, 6, 0, 4, 0, 10, 0, 6, 0, 3, 0, 6, 1, 7, 0, 8, 1 )
